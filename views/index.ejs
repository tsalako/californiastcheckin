<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>California St. Check-in</title>
    <link rel="stylesheet" href="/style.css" />
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script>
      window.AUTO_PASS_CREATION = <%= autoPassCreation ? 'true' : 'false' %>;
      window.AUTO_VISIT_RECORDING = <%= autoVisitRecording ? 'true' : 'false' %>;
      window.AUTO_CLICK_CREATION_LINKS = <%= autoClickCreationLinks ? 'true' : 'false' %>;
      window.AUTO_CLICK_RECORDING_LINKS = <%= autoClickRecordingLinks ? 'true' : 'false' %>;
    </script>
  </head>
  <body>
    <div class="container">
      <h2 class="form-title">California St. Check-in</h2>

      <div class="form-content">
        <!-- Identity -->
        <div class="stack-slot">
          <div id="signinWrapper" class="slot-item hidden">
            <div
              id="g_id_onload"
              data-client_id="<%= googleClientId %>"
              data-callback="onSignIn"
              data-auto_prompt="false"
            ></div>
            <div
              class="g_id_signin"
              data-type="standard"
              data-size="large"
              data-theme="outline"
              data-text="sign_in_with"
              data-shape="rectangular"
              data-logo_alignment="left"
            ></div>
            <button id="altSignInToggle" class="text-link">
              Sign in without Google
            </button>
          </div>

          <div id="manualSignInWrapper" class="slot-item hidden">
            <div class="manual-signin-wrapper">
              <form id="manualSignInForm" class="manual-signin-form">
                <div class="form-row">
                  <input
                    type="text"
                    id="firstName"
                    name="firstName"
                    placeholder="First Name"
                    required
                  />
                  <input
                    type="text"
                    id="lastName"
                    name="lastName"
                    placeholder="Last Name"
                    required
                  />
                </div>
                <input
                  type="email"
                  id="emailManual"
                  name="email"
                  placeholder="Email"
                  required
                />
                <button type="submit" class="button" id="manualSubmit">
                  Continue
                </button>
              </form>
              <button id="backToGoogle" class="text-link">
                Back to Google Sign-in
              </button>
            </div>
          </div>

          <div id="signedInWrapper" class="slot-item hidden">
            <p id="signedInAs" class="signed-in-as"></p>
          </div>
        </div>

        <!-- Action buttons -->
        <div class="stack-slot">
          <div id="createWrapper" class="slot-item hidden">
            <button id="createPassSubmit" class="button">Create Pass</button>
          </div>
          <div id="recordWrapper" class="slot-item hidden">
            <button id="recordVisit" class="button">Record Visit</button>
          </div>
        </div>

        <!-- Feedback + Wallet -->
        <div class="stack-slot">
          <div class="slot-item visible">
            <div class="feedback-wallet-wrapper">
              <div id="feedback" class="feedback" aria-live="polite"></div>
              <div id="button" class="wallet-button-wrapper"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      let userEmail = "",
        fullName = "";
      let isRecording = false;
      const isApple = /iPhone|iPad|iPod/i.test(navigator.userAgent);
      // const isApple = true;
      const platform = isApple ? "apple" : "google";

      const feedbackEl = document.getElementById("feedback");
      const recordVisit = document.getElementById("recordVisit");
      const createPassSubmit = document.getElementById("createPassSubmit");

      function handleSignedInState(email, name) {
        userEmail = email;
        fullName = name;

        document.cookie = `userEmail=${encodeURIComponent(email)}; max-age=${
          60 * 60 * 24 * 366
        }`;
        document.cookie = `name=${encodeURIComponent(name)}; max-age=${
          60 * 60 * 24 * 366
        }`;

        hasPassCheck(email, name);
      }

      function hasPassCheck(email, name) {
        document
          .getElementById("signinWrapper")
          .classList.replace("visible", "hidden");
        document
          .getElementById("signedInWrapper")
          .classList.replace("hidden", "visible");
        document.getElementById("signedInAs").textContent = name;

        fetch(
          `/hasPass?email=${encodeURIComponent(email)}&platform=${platform}`
        )
          .then((res) => res.json())
          .then(({ exists }) => {
            if (exists) {
              document
                .getElementById("recordWrapper")
                .classList.replace("hidden", "visible");
              if (window.AUTO_VISIT_RECORDING) recordVisit.click();
            } else {
              document
                .getElementById("createWrapper")
                .classList.replace("hidden", "visible");
              if (window.AUTO_PASS_CREATION) createPassSubmit.click();
            }
          });
      }

      function onSignIn(response) {
        const payload = JSON.parse(atob(response.credential.split(".")[1]));
        handleSignedInState(payload.email, payload.name);
      }

      document
        .getElementById("altSignInToggle")
        .addEventListener("click", () => {
          document
            .getElementById("signinWrapper")
            .classList.replace("visible", "hidden");
          document
            .getElementById("manualSignInWrapper")
            .classList.replace("hidden", "visible");
        });

      document.getElementById("backToGoogle").addEventListener("click", () => {
        document
          .getElementById("manualSignInWrapper")
          .classList.replace("visible", "hidden");
        document
          .getElementById("signinWrapper")
          .classList.replace("hidden", "visible");
      });

      document
        .getElementById("manualSignInForm")
        .addEventListener("submit", (e) => {
          e.preventDefault();
          const first = document.getElementById("firstName").value.trim();
          const last = document.getElementById("lastName").value.trim();
          const email = document.getElementById("emailManual").value.trim();
          if (!first || !last || !email) return;
          document
            .getElementById("manualSignInWrapper")
            .classList.replace("visible", "hidden");
          const name = `${first} ${last}`;
          handleSignedInState(email, name);
        });

      window.addEventListener("DOMContentLoaded", () => {
        const signinWrapper = document.getElementById("signinWrapper");
        signinWrapper.classList.replace("hidden", "visible");
        if (!isApple) {
          document.getElementById("altSignInToggle").style.display = "none";
        }
        const cookies = document.cookie.split("; ").reduce((acc, c) => {
          const [k, v] = c.split("=");
          acc[k] = decodeURIComponent(v);
          return acc;
        }, {});

        const email = cookies.userEmail;
        const name = cookies.name;
        if (!email) return;

        userEmail = email;
        fullName = name;

        hasPassCheck(email, name);
      });

      createPassSubmit.addEventListener("click", async () => {
        createPassSubmit.disabled = true;
        createPassSubmit.textContent = "Creating...";

        const container = document.getElementById("button");
        const email = userEmail;
        const name = fullName;

        const res = await fetch(`/create-pass`, {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: `name=${encodeURIComponent(name)}&email=${encodeURIComponent(
            email
          )}&platform=${platform}`,
        });

        if (res.ok) {
          const data = await res.json();
          createPassSubmit.textContent = "Created";
          const a = document.createElement("a");
          a.href = platform === "apple" ? data.url : data.button;

          const img = new Image();
          img.src =
            platform === "apple"
              ? "apple-wallet-button.svg"
              : "google-wallet-button.png";
          img.alt =
            platform === "apple"
              ? "Save to Apple Wallet"
              : "Save to Google Wallet";
          img.style.height = "50px";
          img.style.width = "auto";

          img.onload = () => {
            a.appendChild(img);
            container.innerHTML = "";
            container.appendChild(a);
            container.classList.add("show");
            if (window.AUTO_CLICK_CREATION_LINKS) a.click();
          };

          img.onerror = () => {
            a.textContent =
              platform === "apple" ? "Download Pass" : "Save to Wallet";
            container.innerHTML = "";
            container.appendChild(a);
            container.classList.add("show");
            if (window.AUTO_CLICK_CREATION_LINKS) a.click();
          };
        } else {
          const data = await res.json().catch(() => ({}));
          feedbackEl.textContent = data.message || "⚠️ Failed to create pass.";
          feedbackEl.classList.add("show");
          createPassSubmit.textContent = "Create Pass";
          createPassSubmit.disabled = false;
        }
      });

      recordVisit.addEventListener("click", async () => {
        recordVisit.disabled = true;
        recordVisit.textContent = "Recording...";

        const email = userEmail;
        const name = fullName;

        const res = await fetch("/record-visit", {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: `name=${encodeURIComponent(name)}&email=${encodeURIComponent(
            email
          )}&platform=${platform}`,
        });

        if (res.ok) {
          recordVisit.textContent = "Recorded!";
          const data = await res.json();
          if (platform === "apple") {
            if (data.hasRegisteredDevice) {
              try {
                await fetch(`/push-update?email=${encodeURIComponent(email)}`);
              } catch (err) {
                feedbackEl.textContent =
                  err.message || "⚠️ Failed to record visit.";
                feedbackEl.classList.add("show");
                recordVisit.textContent = "Record Visit";
                recordVisit.disabled = false;
              }
            } else if (data.url) {
              const container = document.getElementById("button");
              const a = document.createElement("a");
              a.href = data.url;

              const img = new Image();
              img.src = "apple-wallet-button.svg";
              img.alt = "Update Apple Wallet";
              img.style.height = "50px";
              img.style.width = "auto";

              img.onload = () => {
                a.appendChild(img);
                container.innerHTML = "";
                container.appendChild(a);
                container.classList.add("show");
                if (window.AUTO_CLICK_RECORDING_LINKS) a.click();
              };

              img.onerror = () => {
                console.warn("Failed to load Apple Wallet image.");
                a.textContent = "Download Pass";
                container.innerHTML = "";
                container.appendChild(a);
                container.classList.add("show");
                if (window.AUTO_CLICK_RECORDING_LINKS) a.click(); // fallback in case image fails
              };
            }
          }
        } else {
          const data = await res.json().catch(() => ({}));
          feedbackEl.textContent = data.message || "⚠️ Failed to record visit.";
          feedbackEl.classList.add("show");
          recordVisit.textContent = "Record Visit";
          recordVisit.disabled = false;
        }

        setTimeout(() => feedbackEl.classList.remove("show"), 3000);
      });
    </script>
  </body>
</html>
